@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@using XebecPortal.Shared
@inject State State
@inject HttpClient http

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Montserrat', sans-serif;
    }


    /*new*/
    .input-form {
        background-color: #fff;
        padding: 10px;
        height: 90%;
        width: 90%;
        margin: auto;
        max-width: 600px;
        max-height: 350px;
        display: flex;
        flex-direction: column;
        border-radius: 5px;
        overflow-y: auto;
        background-color: #b4c0d0;
        box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;
    }

    .input-form::-webkit-scrollbar {
        width: 12px;
    }

    .input-form::-webkit-scrollbar-track {
        background-color: #EAF2F8;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
    }

    .input-form::-webkit-scrollbar-thumb {
        background-color: #95A5A6;
        border: 3px solid #EAF2F8;
        border-radius: 20px;
    }

    .inline {
        width: 90%;
        margin: auto;
        display: flex;
    }


    .inline-inner {
        width: 45%;
        margin: auto;
        display: flex;
        flex-direction: column;
    }

    label {
        font-size: 14px;
        font-weight: bold;
        margin-top: 1rem;
        margin-bottom: 0px;
    }

    .inline-inner input,
    select {
        padding: 3px 5px;
        border-radius: 5px;
        border: 0.5px solid #7C7C7C;
        font-size: 13px;
    }

    .inline-inner input:focus,
    select:focus,
    .address-inner textarea:focus {
        outline: none !important;
        border: 1px solid #0077b6;
        box-shadow: 0 0 10px #719ECE;
    }

    .address-inner {
        width: 80%;
    }

    .address-inner textarea {
        height: 100px;
        padding: 5px 10px;
        resize: none;
        border-radius: 5px;
        border: 0.5px solid #7C7C7C;
    }

    .btn-container,
    .form-title {
        padding: 1rem 0;
        width: 90%;
        margin: auto;
        display: flex;
        justify-content: center;
        align-items: center;

    }
</style>

<form class="input-form">


    <div class="form-title">
        <h4>Additional Information</h4>
    </div>


    <div class="inline">

        <div class="inline-inner">
            <label for="github">GitHub:</label>
            <input type="text" id="github" @bind="AdditionalInfo.GitHubLink">
        </div>

        <div class="inline-inner">
            <label for="facebook">Facebook:</label>
            <input type="text" id="facebook" @bind="AdditionalInfo.FacebookLink">
        </div>


    </div>

    <div class="inline">

        <div class="inline-inner">
            <label for="linkedin">LinkedIn:</label>
            <input type="text" id="linkedin" @bind="AdditionalInfo.LinkedInLink">
        </div>

        <div class="inline-inner">
            <label for="website">Website:</label>
            <input type="text" id="website" @bind="AdditionalInfo.PersonalWebsiteUrl">
        </div>

    </div>

    <div class="inline-inner">
        <label for="documents">Documents:</label>
        <input type="file" id="documents" @bind="AdditionalInfo.DocumentUrl">
    </div>

    <div class="btn-container">
        <button type="button" class="btn btn-primary btn-sm mr-1"
            @onclick="@(() => Decrement.InvokeAsync())">Prev</button>
        <button type="button" class="btn btn-success btn-sm ml-1 mr-1" @onclick="Save">Save</button>
        <button type="button" class="btn btn-primary btn-sm ml-1"
            @onclick="@(() => Increment.InvokeAsync())">Next</button>
    </div>

</form>
<p>@message</p>

@code {

    /*
    
    TODO: replace C:\fakepath\ in document url with path ro where file is stored
    
    */

    private AdditionalInformationTest AdditionalInfo = new AdditionalInformationTest();

    private string message = string.Empty;

    [Parameter] public EventCallback<int> Increment { get; set; }

    [Parameter] public EventCallback<int> Decrement { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var userdata = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            string[] userdetails = userdata.Split(';');
            State.UserEmail = userdetails[0];
            State.Role = userdetails[1].ToLower();
            State.Id = Int32.Parse(userdetails[3]);

             

            try
            {
                AdditionalInfo = await http.GetFromJsonAsync<AdditionalInformationTest>($"api/AdditionalInformationTest/{State.Id}");
            }   
            catch(Exception ex)
            {
                AdditionalInfo = new AdditionalInformationTest();
                AdditionalInfo.AppUserId = State.Id;
            }  

        }

        AdditionalInfo.DocumentUrl = null;       
        State.IsSaved = false;
    }

    private async Task Save()
    {
        
        string[] url = AdditionalInfo.DocumentUrl != null ? AdditionalInfo.DocumentUrl.Split('\\') : null;
        AdditionalInfo.DocumentName = url != null ? url[url.Length - 1] : "";
        message = "Saved!";
        @* await http.PostAsJsonAsync("api/AdditionalInformationTest", AdditionalInfo); *@
        State.IsSaved = true;
        AdditionalInfo = new AdditionalInformationTest();

    }

}