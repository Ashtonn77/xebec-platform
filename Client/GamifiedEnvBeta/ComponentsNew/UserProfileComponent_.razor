@inject HttpClient httpClient
@inject State State
@inject IJSRuntime jsRuntime

<style>
    .profile-wrapper {
        width: 100%;
        height: 100%;
        background-color: lightgray;
        flex-grow: 1;
        display: flex;


        overflow: auto;
        min-height: 0;
    }

    .left {
        width: 60%;
        margin: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-end;
    }

    .right {
        width: 35%;
        height: 100%;
        margin: auto;
        position: -webkit-sticky;
        position: sticky;
        top: 0;        
    }

    .content {
        width: 100%;
        background-color: #fff;
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
        max-width: 650px;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    }

    .right .content
    {
        max-width: 400px; 
        padding: 15px;
        font-size: 15px;  
    }

    .right .content ul
    {
        margin: 5px 0 0 0;
        padding: 0;
    }

    .right .content ul li{
        list-style: none;
        margin-bottom: 5px;
        font-weight: bold;
        color: green;
    }

    .document-type
    {
        font-size: 13px;
        margin-left: 10px;        
    }

    .personal {
        display: flex;
        flex-direction: column;
    }

    h5 {
        font-weight: bold;
    }

    .top {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid lightgray;
    }

    .bottom {
        position: relative;
        display: flex;
        padding: 10px 5px;
        margin: 0.8rem 0;
    }

    .image img {
        max-width: 180px;
        max-height: 180px;
    }

    .details {
        width: 100%;
        height: inherit;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        padding: 0 10px;
    }

    .details span {
        font-size: 14px;
        margin-bottom: 5px;
        letter-spacing: 0.3px;
    }

    .education .details {
        padding: 0;
    }

    .line
    {
        width: 100%;
        height: 1px;
        background-color: #333;
        margin: 1rem auto;
    }

    .btn-inline
    {
        display: flex;
    }

</style>


@if(personalModal)
{
    <PersonalModal TogglePersonalModal="TogglePersonalModal"></PersonalModal>
}
else if(educationModal)
{
    <EducationModal ToggleEducationModal="ToggleEducationModal"></EducationModal>
}
else if(workModal)
{
    <WorkHistoryModal ToggleWorkModal="ToggleWorkModal"></WorkHistoryModal>
}
else if(portfolioModal)
{
    <ProfilesPortfoliosModal TogglePorfoliosModal="TogglePorfoliosModal"></ProfilesPortfoliosModal>
}
else if(documentsModal)
{
    <DocumentsModal ToggleDocumentsModal="ToggleDocumentsModal"></DocumentsModal>
}
else if(addNewEducationModal)
{
    <EducationModalAddNew ToggleEducationModalAddNew="ToggleEducationModalAddNew"></EducationModalAddNew>
}
else if(addNewWorkModal)
{
    <WorkHistoryModalAddNew ToggleWorkModalAddNew="ToggleWorkModalAddNew"></WorkHistoryModalAddNew>
}

<div class="profile-wrapper">

    <div class="left">

        <div class="personal content">

            <div class="top">
                <h5>Personal Information</h5>
                <button class="btn btn-primary btn-sm" @onclick="TogglePersonalModal">Edit</button>
            </div>

            <div class="bottom">

                <div class="image">
                    <img src="img\user.jpg" alt="user">
                </div>

                <div class="details">

                    @if(Personal != null)
                    {
                        <span>@Personal.FirstName @Personal.LastName</span>
                        <span>@Personal.Address</span>
                        <span>@Personal.Email</span>
                        <span>@Personal.PhoneNumber</span>
                    }
                    else
                    {
                        <span>Name: N/A</span>
                        <span>Address: N/A</span>
                        <span>Email: N/A</span>
                        <span>Phone Number: N/A</span>
                    }
                 

                </div>

            </div>

        </div>

        <div class="education content">

            <div class="top">
                <h5>Education History</h5>
                <div class="btn-container">
                    <button class="btn btn-success btn-sm" @onclick="ToggleEducationModalAddNew">Add New</button>                 
                </div>
            </div>

            <div class="bottom">

                <div class="details">

                    @if(Educations != null && Educations.Count > 0)
                    {
                        @foreach(var Education in Educations)
                        {
                            <span>@Education.Insitution</span>
                            <span>@Education.Qualification</span>
                            <span>@Education.StartDate - @Education.EndDate</span>

                            <div class="btn-inline">

                                <button class="btn btn-danger btn-sm mt-2 mr-1" @onclick="() => RemoveEducation(Education)">Remove</button>

                                <button type="button" class="btn btn-primary btn-sm ml-1 mt-2" @onclick="() => ToggleEducationModal(Education)">Edit</button> 
                                
                            </div>
                          
                            <div class="line"></div>
                        }
                    }
                    else
                    {
                        <span>Insitution: N/A</span>
                        <span>Qualification: N/A</span>
                        <span>Start Date: N/A</span>
                        <span>End Date: N/A</span>
                    }

                </div>

            </div>



        </div>

        <div class="content">

            <div class="top">
                <h5>Work History</h5>
                <div class="btn-container">
                    <button class="btn btn-success btn-sm" @onclick="ToggleWorkModalAddNew">Add New</button>                  
                </div>
            </div>

            <div class="bottom">

                <div class="details">

                    @if(WorkHistories != null && WorkHistories.Count > 0)
                    {
                        @foreach(var Work in WorkHistories)
                        {
                             <span>@Work.CompanyName</span>
                             <span>@Work.JobTitle</span>
                             <span>@Work.Description</span>
                             <span>@Work.StartDate - @Work.EndDate</span>
                             
                            <div class="btn-inline">                                
                                
                                <button class="btn btn-danger btn-sm mt-2 mr-1" @onclick="() => RemoveWorkHistory(Work)">Remove</button>

                                <button type="button" class="btn btn-primary btn-sm ml-1 mt-2"  @onclick="() => ToggleWorkModal(Work)" >Edit</button> 
                                
                            </div>
                          
                            <div class="line"></div>
                        }
                    }
                    else
                    {
                        <span>Company Name: N/A</span>
                        <span>Job Title: N/A</span>
                        <span>Description: N/A</span>
                        <span>Start Date: N/A</span>
                        <span>End Date: N/A</span>
                    }

                </div>

            </div>

        </div>

        <div class="content">

            <div class="top">
                <h5>Profiles and Portfolios</h5>
                <div class="btn-container">
                    <button class="btn btn-primary btn-sm" @onclick="TogglePorfoliosModal">Edit</button>
                </div>
            </div>

            <div class="bottom">

                <div class="details">

                    <span>www.github.com</span>
                    <span>www.linkedin.com</span>
                    <span>www.facebook.com</span>
                    <span>www.personalsite.com</span>

                </div>

            </div>

        </div>

        <div class="content">

            <div class="top">
                <h5>Documents</h5>
                <div class="btn-container">
                    <button class="btn btn-success btn-sm">Upload</button>
                    <button class="btn btn-primary btn-sm" @onclick="ToggleDocumentsModal">Edit</button>
                </div>
            </div>

            <div class="bottom">

                <div class="details">

                    <span>No documents uploaded</span>

                </div>

            </div>


        </div>

    </div>

    <div class="right">
    @State.Id - @State.UserEmail - @State.Role

        <div class="content">

            <ul>
               
                <li>Personal Information</li>
                <li style="color:@educationProgress">Education History</li>
                <li style="color:@workProgress">Work History</li>
                <li>Profiles and Portfolios</li>
                <li>Documents:</li>

                <ul>
                    <li class="document-type">Updated C.V</li>
                    <li class="document-type">Academic Transcript</li>
                    <li class="document-type">Certified Copy of I.D/Passport</li>
                    <li class="document-type">Cover Letter</li>                   
                </ul>

            </ul>
          
        
        </div>

    </div>


</div>

@code
{


    PersonalTestInfo Personal;

    IList<EducationTest> Educations;
    IList<WorkHistoryTest> WorkHistories;

    WorkHistoryTest WorkHistory;

    AdditionalInformationTest AdditionalInformationTest;

    string educationProgress = "green";
    string workProgress = "green";
     

    protected override async Task OnInitializedAsync()
    {
       
        await base.OnInitializedAsync();
        var userdata = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            string[] userdetails = userdata.Split(';');
            State.UserEmail = userdetails[0];
            State.Role = userdetails[1].ToLower();
            State.Id = Int32.Parse(userdetails[3]);          

        }

        /*
        The problem is putting multiple asyncronous calls inside the try
        It works when its just one call        
        */
       
        Educations = await httpClient.GetFromJsonAsync<IList<EducationTest>>($"/api/EducationTest/all/{State.Id}");
        WorkHistories = await httpClient.GetFromJsonAsync<IList<WorkHistoryTest>>($"/api/WorkHistoryTest/all/{State.Id}");

        if(Educations.Count > 0)
        {
            educationProgress = "green";
           
        }
        else
        {
            educationProgress = "red";
            
        }

        if(WorkHistories.Count > 0)
        {
            workProgress = "green";
           
        }
        else
        {
            workProgress = "red";
            
        }

    }


    private async Task RemoveEducation(EducationTest education)
    {
        await httpClient.DeleteAsync($"api/EducationTest/{education.Id}");
        Educations = await httpClient.GetFromJsonAsync<IList<EducationTest>>($"/api/EducationTest/all/{State.Id}");

        if(Educations.Count > 0)
        {
            educationProgress = "green";
            
        }
        else
        {
            educationProgress = "red";
           
        }

    }

    private async Task RemoveWorkHistory(WorkHistoryTest work)
    {
        await httpClient.DeleteAsync($"api/WorkHistoryTest/{work.Id}");
        WorkHistories = await httpClient.GetFromJsonAsync<IList<WorkHistoryTest>>($"/api/WorkHistoryTest/all/{State.Id}");

        if(WorkHistories.Count > 0)
        {
            workProgress = "green";
            
        }
        else
        {
            workProgress = "red";
           
        }

    }


    bool personalModal = false;
    bool educationModal = false;
    bool workModal = false;
    bool documentsModal = false;

    bool portfolioModal = false;
    private void TogglePersonalModal()
    {
        personalModal = !personalModal;
    }       

    private async Task ToggleEducationModal(EducationTest Education)
    {
        State.EducationEditId = Education.Id;
        educationModal = !educationModal;
        Educations = await httpClient.GetFromJsonAsync<IList<EducationTest>>($"/api/EducationTest/all/{State.Id}");        
    }

    private async Task ToggleWorkModal(WorkHistoryTest Work)
    {
        State.WorkEditId = Work.Id;
        workModal = !workModal;
        WorkHistories = await httpClient.GetFromJsonAsync<IList<WorkHistoryTest>>($"/api/WorkHistoryTest/all/{State.Id}");
    }

    private void TogglePorfoliosModal()
    {
        portfolioModal = !portfolioModal;
    }

    private void ToggleDocumentsModal()
    {
        documentsModal = !documentsModal;
    }


    /*add new modals*/
    bool addNewEducationModal = false;
    private async Task ToggleEducationModalAddNew()
    {
        addNewEducationModal = !addNewEducationModal;
        Educations = await httpClient.GetFromJsonAsync<IList<EducationTest>>($"/api/EducationTest/all/{State.Id}");

        if(Educations.Count > 0)
        {
            educationProgress = "green";
            
        }
        else
        {
            educationProgress = "red";
           
        }
        
    }


    bool addNewWorkModal = false;
    private async Task ToggleWorkModalAddNew()
    {
        addNewWorkModal = !addNewWorkModal;
        WorkHistories = await httpClient.GetFromJsonAsync<IList<WorkHistoryTest>>($"/api/WorkHistoryTest/all/{State.Id}");

        if(WorkHistories.Count > 0)
        {
            workProgress = "green";
            
        }
        else
        {
            workProgress = "red";
           
        }
        
    }

}