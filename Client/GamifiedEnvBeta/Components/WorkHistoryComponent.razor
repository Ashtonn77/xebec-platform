@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject State State

<style>

    .add-button-div {
        width: 90%;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        max-width: 650px;
    }

</style>

<WorkHistoryFormComponent />
<center>
    <div class="add-button-div" style="margin-top:20px">
        <button class="btn btn-primary btn-sm" @onclick="addNewDiv">Add</button>
    </div><br />
    @* Displays all form components saved in the the forms list *@
    @for (int i = 0; i < forms.Count; ++i)
    {
        @forms[i];
        <div class="add-button-div" style="margin-top:20px">
            <button class="btn btn-primary btn-sm mr-1" @onclick="addNewDiv">Add</button>
            <button class="btn btn-danger btn-sm ml-1" @onclick="(()=>removeDiv(i-1))">Remove</button>
        </div><br />

    }
</center>

@if (State.UserEmail == null)
{
    <p>Empty</p>
}
else
{
    <p>@State.UserEmail</p>
}
<p>@State.Role</p>
<p>@State.Id</p>

<!--The javascript or jquery that's being invoked is in wwwroot in the js folder called "WorkHistoryForm.js"'-->
@code{
    protected override async void OnAfterRender(bool firstRender)
    {
        await JS.InvokeVoidAsync("workHistoryForm");
        base.OnAfterRender(firstRender);
    }
}