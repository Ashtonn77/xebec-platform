@page "/candidateinfoexp/{JobId}"
@layout JobPortalLayout
@inject IJSRuntime jsr
@inject HttpClient httpClient
@using XebecPortal.Client.JobPortalTestEnv.Models
@using XebecPortal.Shared.Security
<style>

    * {
        font-family: 'Montserrat', sans-serif;
    }

    .wrapper-job {
        width: 100%;
        height: 86vh;
        /*display: flex;
                                                                                    flex-direction: column;
                                                                                    align-items: center;*/
        background-color: #6c85a3
    }

    .add-job-container {
        /*padding: 20px;*/
        width: 90%;
        margin: auto auto 5% auto;
        height: 67%;
        display: flex;
        align-items: center;
        flex-direction: column;
        /*box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;*/
        /* background-color: #fff;*/
        border-radius: 5px;
    }

    .inner-wrapper {
        width: 100%;
        /*max-height: 90%;*/
        margin: auto;
        display: flex;
        background-color: aliceblue;
        padding: 10px;
    }

    .left {
        width: 45%;
        height: inherit;
        padding: 5px;
        overflow-x: unset;
        overflow-y: scroll;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        background-color: #fff;
        border-radius: 5px;
    }

        .left::-webkit-scrollbar {
            width: 12px;
        }

        .left::-webkit-scrollbar-track {
            background-color: #EAF2F8;
        }

        .left::-webkit-scrollbar-thumb {
            background-color: #95A5A6;
            border-radius: 20px;
            border: 3px solid #EAF2F8;
        }

    tbody tr {
        cursor: pointer;
    }

    .input:focus {
        outline: none !important;
        border: 1px solid red;
        box-shadow: 0 0 10px #719ECE;
    }

    .profile {
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        border-radius: 5px;
        background-color: white;
    }

    .filterSection {
        display: flex;
        flex-direction: row;
        /*padding-left: 50px;*/
    }

    .bar {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .filterpill {
        background-color: #ddd;
        border: none;
        color: black;
        padding: 4px 6px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        margin: 4px 2px;
        border-radius: 12px;
    }

    .filterClose {
        cursor: pointer;
        border-radius: 11px;
        height: 50%;
    }

        .filterClose:hover {
            background-color: #C4C4C4;
        }

    /*.filterEthinic {
     height: 75%;
     width: 65%;
    }*/

    /*POP UP Styling*/

    /* The popup (background) */
    .popup {
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }
    /* popup Content */
    .popup-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
    /*POP UP Styling - end*/
</style>
<!--Popup window Start-->
<!-- Trigger/Open The popup -->
<div class="popup" style="display: @popupDisplay;">

    <!-- popup content -->
    <div class="popup-content">
        <!--Testing-->
        <p>Application phases for user</p>
        <ul>
            @if (CandidateAppPhases != null)
            {
                @foreach (var tst in CandidateAppPhases)
                {
                    <li>tst</li>
                }
            }
        </ul>
        <!--/Testing-->
    </div>
</div>

<!--Pop up functionality-->
@functions {
    private string popupDisplay = "none";

    private void ShowPopUp()
    {

        popupDisplay = "block";
        //EditForm
    }

    private void ClosePopUp()
    {
        // Save changes if any
        //Save any edits to temporary location

        //Post temp helper

        //close page
        popupDisplay = "none";
    }
}

@functions {

    public Status tempStatus { get; set; } = new Status();
    public ApplicationPhase tempPhase { get; set; } = new ApplicationPhase();

    IList<ApplicationPhaseHelper> CandidateAppPhases { get; set; }
    //Pass required Info to popup form
    int ind = 0;
    private async Task PassInfoAsync(PersonalInformation Candidate, int jobId = 0)
    {
        //Show PopUp
        ShowPopUp();
        ind = jobId;

        //Get App User ID of candidate
        int AppUserId = Candidate.AppUserId;

        //Get All ApplicationPhases Associated with candidate's appuserid
        //this will get it from the api's database
        //Get status for candidate

        //Get required info required by form>
        string firstname = Candidate.FirstName;
        string lastName = Candidate.LastName;

        CandidateAppPhases = await httpClient.GetFromJsonAsync<List<ApplicationPhaseHelper>>($"api/ApplicationPhaseHelper/appPhase?AppUserId=14&jobId=33");

    }

    /// <summary>
    /// Uses linear search to find the latest date
    /// If we might not need this
    /// the latest date will always be th last date in  the ApplicationPhaseHelper table
    ///  </summary>
    /// <param name="applicationPhaseHelpers"></param>
    /// <returns></returns>
    private ApplicationPhaseHelper GetLastestPhaseInfo(IList<ApplicationPhaseHelper> applicationPhaseHelpers)
    {
        DateTime lastestdate = applicationPhaseHelpers[0].TimeMoved;
        int pos = 0;

        for (int i = 0; i < applicationPhaseHelpers.Count; i++)
        {
            DateTime ObservedDate = applicationPhaseHelpers[i].TimeMoved;
            //https://docs.microsoft.com/en-us/dotnet/api/system.datetime.compare?view=net-5.0
            if (DateTime.Compare(lastestdate, ObservedDate) < 0)
            {
                lastestdate = ObservedDate;
                pos = i;
            }
        }

        return applicationPhaseHelpers[pos];
    }
}
<!--/Pop up functionality-->
<!--Popup window End-->

<div class="container-fluid" style="background-color: #6c85a3">
    <!--Entire page as a flexbox-->
    <div class="wrapper-job">

        <!--Heading-->
        <div class="row" style="background-color: #b4c0d0">
            <div class="col-12">
                @*<h4 class="text-center">Candidates</h4>*@
            </div>

            <div class="col-12 bar">
                <div class="d-flex justify-content-center input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm" @onclick="RealSearch"><i class="fa fa-search"></i></span>
                    </div>
                    <input type="text" class="form-control col-5" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Search: Name, Status, job appl...." @bind="SearchTerm">
                    @*<span><button class="btn btn-primary" >Search</button></span>*@
                </div>
            </div>
            <br />

            @*<div class="col-12">
                    <div class="d-flex justify-content-center filterSection d-flex align-items-center">

                        <select class="form-control filterEthinic" @onchange="@onValChanged">
                            <option value="0" disabled selected> Filter Race</option>
                            <option value="Black">Black</option>
                            <option value="White">White</option>
                            <option value="Indian">Indian</option>
                            <option value="Coloured">Coloured</option>
                        </select>

                        <select class="form-control filterGender" @onchange="@onValChanged">
                            <option value="0" disabled selected> Filter By Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </select>

                        <select class="form-control filterDisability" @onchange="@onValChanged">
                            <option value="0" disabled selected> Filter By Disability</option>
                            <option value="disabled">disabled</option>
                            <option value="abled">Not Disabled</option>
                        </select>
                    </div>
                </div>*@
            <br />
            <br />
        </div>

        <div class="row">
            <div class="col-12">
                @if (RealCandidatesInfo != null)
                {
                    <!--Div in the center of the page-->
                    <div class="add-job-container">

                        <div>
                            @if (EthnicFilterApplied)
                            {
                                <div class="filterpill">
                                    <span>@EthnicFilter</span>
                                    <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="ClearEthnic" /></span>
                                </div>
                            }
                            @if (GenderFilterApplied)
                            {
                                <div class="filterpill">
                                    <span>@GenderFilter</span>
                                    <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="ClearGender" /></span>
                                </div>
                            }
                            @if (DisabilityFilterApplied)
                            {
                                <div class="filterpill">
                                    <span>@DisabilityFilter</span>
                                    <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="ClearDisability" /></span>
                                </div>
                            }
                        </div>
                        <!--Div containing the functionality-->
                        <div class="inner-wrapper m-0">

                            <!--Boxes on the left/summary boxes-->
                            <div class="left m-2">
                                <div class="">
                                    <table class="table table-sm table-striped">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Full Name</th>
                                                <th scope="col">Phase</th>
                                                <th scope="col">Change status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (RealCandidatesInfo.Count > 0)
                                            {
                                                int num = 1;
                                                @for (int i = 0; i < RealCandidatesInfo.Count; i++)
                                                {
                                                    var candidate = RealCandidatesInfo[i];
                                                    <tr @onclick="() => ChangeCurrent(candidate)" id=@($"{(candidate.Id)}")>
                                                        <td scope="row">@(num++)</td>
                                                        <td scope="row">@candidate.FirstName @candidate.LastName</td>

                                                        <td scope="row">@applicationPhases[i].Description</td>
                                                        <td scope="row" class="">
                                                            ,
                                                            <a @onclick="e => PassInfoAsync(candidate)"><i class="fa fa-edit"></i></a>
                                                        </td>
                                                    </tr>

                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <!--Box on the right/Details box + buttons-->
                            <div class="right  col-6 m-2">

                                <!--Details box-->
                                <div class="profile rounded ">
                                    <div class="col-12">
                                        <div class="text-center">

                                            <div class="col-xl-12 col-sm-12 mb-1">
                                                <div class="py-5 px-4 select-details">
                                                    @if (RealUserPersonalInfo != null)
                                                    {
                                                        <img src="/img/Guy.png" alt="" width="70" class="img-fluid rounded-circle mb-3 img-thumbnail shadow-sm">
                                                        <h5 class="mb-0">@RealUserPersonalInfo.FirstName @RealUserPersonalInfo.LastName</h5>
                                                        <hr />
                                                        <span class="small text-uppercase text-muted">Gender</span>
                                                        <hr>
                                                        <span class="small text-uppercase text-muted">Contact Info</span>
                                                        <p><span class="small text-uppercase text-muted">Phone Number:</span> @RealUserPersonalInfo.PhoneNumber</p>
                                                        <p><span class="small text-uppercase text-muted">Address:</span> @RealUserPersonalInfo.Address</p>
                                                        <hr>
                                                        <div>
                                                            <span class="small text-uppercase text-muted">APPLICATION STATUS</span>
                                                            <br />
                                                            @applicationPhases[0].Description (@statuses[0].Description)
                                                            @*<ProgressBarComp />*@
                                                        </div>
                                                        <hr />
                                                        <span class="small text-uppercase text-muted">More Info</span>
                                                        <p>@applicationPhaseHelpers[0].Comments</p>
                                                        @*<p>@CurrentCandidate.ExtraInfo</p>*@
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                }
                else
                {
                    <br /> <br /> <br />
                    <h2>Loading...</h2>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public ApplicationPhaseHelper TempPhaseHelper { get; set; } = new ApplicationPhaseHelper();

    private List<AppUser> RealCandidates { get; set; } = new List<AppUser>();

    private AppUser RealUser { get; set; }
    private List<PersonalInformation> RealCandidatesInfo { get; set; }
    private PersonalInformation RealUserPersonalInfo { get; set; }
    private List<WorkHistory> RealUserExperience { get; set; }
    private List<Education> RealUserEducation { get; set; }
    private List<ApplicationPhase> applicationPhases { get; set; }
    private List<ApplicationPhaseHelper> applicationPhaseHelpers { get; set; }
    private List<Status> statuses { get; set; }
    private ApplicationPhaseHelper displayAPH { get; set; }

    [Parameter]
    public string JobId { get; set; }

    #region Component LifeCycles
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            RealCandidates = await httpClient.GetFromJsonAsync<List<AppUser>>($"api/CandidateTest/?JobId={JobId}");
            applicationPhases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("api/ApplicationPhase");
            applicationPhaseHelpers = await httpClient.GetFromJsonAsync<List<ApplicationPhaseHelper>>("api/ApplicationPhaseHelper");
            statuses = await httpClient.GetFromJsonAsync<List<Status>>("api/Status");

            if (RealCandidates.Count > 0)
            {
                Console.WriteLine("we made it here");
                RealCandidatesInfo = await httpClient.GetFromJsonAsync<List<PersonalInformation>>($"api/PersonalInformation/candidates/{JobId}");
            }
            if (RealCandidatesInfo.Count > 0)
            {
                RealUserPersonalInfo = RealCandidatesInfo[0];
                CurrentCandidate = Candidates[0];
            }

        }
        catch (Exception ex)
        {
            RealCandidates = new List<AppUser>();
            RealCandidatesInfo = new List<PersonalInformation>();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsr.InvokeVoidAsync("initialize");  //Calls the initialize function from the javascript file.
        }
        if (Candidates.Count > 0)
        {
            CurrentCandidate = Candidates[0];
        }
    }
    #endregion Component LifeCycles

    private void ChangeCurrent(PersonalInformation newcandidate)
    {
        RealUserPersonalInfo = newcandidate;
    }

    #region Searching and Filtering
    //Search query parameters
    private string SearchTerm { get; set; } = string.Empty;
    private string DisabilityFilter { get; set; } = string.Empty;
    private string EthnicFilter { get; set; } = string.Empty;
    private string GenderFilter { get; set; } = string.Empty;

    //boolean filtering checkers
    private bool EthnicFilterApplied = false;
    private bool GenderFilterApplied = false;
    private bool DisabilityFilterApplied = false;

    private List<PersonalInformation> SearchedCandidates { get; set; } = new List<PersonalInformation>();

    private void onValChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        switch (args.Value.ToString())
        {
            case "Black":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "White":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "Indian":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "Coloured":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "Male":
                GenderFilter = args.Value.ToString();
                GenderFilterApplied = true;
                break;
            case "Female":
                GenderFilter = args.Value.ToString();
                GenderFilterApplied = true;
                break;
            case "disabled":
                DisabilityFilter = args.Value.ToString();
                DisabilityFilterApplied = true;
                break;
            case "abled":
                DisabilityFilter = args.Value.ToString();
                DisabilityFilterApplied = true;
                break;
            default:
                break;
        }
        SearchEvent();
    }

    //Clear Methods
    private void ClearEthnic()
    {
        EthnicFilterApplied = false;
        EthnicFilter = string.Empty;
        SearchEvent();
    }
    private void ClearGender()
    {
        GenderFilterApplied = false;
        GenderFilter = string.Empty;
        SearchEvent();
    }
    private void ClearDisability()
    {
        DisabilityFilterApplied = false;
        DisabilityFilter = string.Empty;
        SearchEvent();
    }

    private void RealSearch()
    {

        SearchEvent();

    }

    private async Task<List<PersonalInformation>> SearchEvent()
    {

        try
        {
            RealCandidates = await httpClient.GetFromJsonAsync<List<AppUser>>($"api/CandidateTest/?JobId={int.Parse(JobId)}");
        }
        catch (Exception ex)
        {
            RealCandidates = new List<AppUser>();
        }

        if (RealCandidates.Count > 0)
        {
            SearchedCandidates = await httpClient.GetFromJsonAsync<List<PersonalInformation>>($"api/CandidateTest/candidates/?Job={JobId}&SearchQuery={SearchTerm}&ethnicityFiler={EthnicFilter}&GenderFilter={GenderFilter}&disabilityFilter={DisabilityFilter}");
        }

        if (SearchedCandidates.Count > 0)
        {
            RealUserPersonalInfo = SearchedCandidates[0];
        }
        RealCandidatesInfo = SearchedCandidates;
        InvokeAsync(StateHasChanged);
        return RealCandidatesInfo;
    }

    #endregion

    //==============================================================================================================================================================

    //TestModels
    private static List<CandidateTest> DisplayItems = Candidates;

    private CandidateTest CurrentCandidate = new CandidateTest();

    //Data
    private static List<CandidateTest> Candidates = new List<CandidateTest>
{

    new CandidateTest
    {
        Id = 1,
        Name = "Johnathan Snow",
        JobAppliedFor = "Developer",
        YearsOfExp = 2,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    },

    new CandidateTest
    {
        Id = 2,
        Name = "Edward Stark",
        JobAppliedFor = "Lawyer",
        YearsOfExp = 8,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    },

    new CandidateTest
    {
        Id = 3,
        Name = "Peter Parker",
        JobAppliedFor = "Developer",
        YearsOfExp = 1,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    },

    new CandidateTest
    {
        Id = 4,
        Name = "Bruce Banner",
        JobAppliedFor = "Cloud Engineer",
        YearsOfExp = 5,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    }

    };

}