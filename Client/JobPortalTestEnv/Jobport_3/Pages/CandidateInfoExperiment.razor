@page "/candidateinfoexp/{JobId}"
@inject IJSRuntime jsr
@inject HttpClient httpClient
@using XebecPortal.Client.JobPortalTestEnv.Models
@using XebecPortal.Shared.Security


<style>

    * {
        font-family: 'Montserrat', sans-serif;
    }

    .wrapper-job {
        width: 100%;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: white;
    }

    .add-job-container {
        padding: 20px;
        width: 90%;
        margin: auto auto 5% auto;
        height: 90%;
        display: flex;
        align-items: center;
        flex-direction: column;
        /*box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;*/
        /* background-color: #fff;*/
        border-radius: 5px;
    }

    .inner-wrapper {
        width: 100%;
        max-height: 90%;
        margin: auto;
        display: flex;
        /*background-color: aliceblue;*/
    }

    .left {
        width: 45%;
        height: inherit;
        padding: 5px;
        overflow-x: unset;
        overflow-y: scroll;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        background-color: #fff;
        border-radius: 5px;
    }

        .left::-webkit-scrollbar {
            width: 12px;
        }

        .left::-webkit-scrollbar-track {
            background-color: #EAF2F8;
        }

        .left::-webkit-scrollbar-thumb {
            background-color: #95A5A6;
            border-radius: 20px;
            border: 3px solid #EAF2F8;
        }

    tbody tr {
        cursor: pointer;
    }


    .input:focus {
        outline: none !important;
        border: 1px solid red;
        box-shadow: 0 0 10px #719ECE;
    }

    .right {
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        overflow-y: scroll;
        border-radius: 5px;
    }

        .right::-webkit-scrollbar {
            width: 12px;
        }

        .right::-webkit-scrollbar-track {
            background-color: #EAF2F8;
        }

        .right::-webkit-scrollbar-thumb {
            background-color: #95A5A6;
            border-radius: 20px;
            border: 3px solid #EAF2F8;
        }

    .filterSection {
        display: flex;
        flex-direction: row;
        padding-left:50px;
    }
    .filterpill {
        background-color: #ddd;
        border: none;
        color: black;
        padding: 4px 6px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        margin: 4px 2px;
        border-radius: 12px;
    }
    .filterClose{
        cursor: pointer;
        border-radius:11px;
        height: 50%;
    }
        .filterClose:hover {
            background-color: #C4C4C4;
        }

        .filterEthinic{
            height:75%;
            width: 65%;
        }
</style>




<!--Entire page as a flexbox-->
<div class="wrapper-job">

    <!--Heading-->
    <h1 class="mt-5 p-" style="margin-bottom: -5px; font-size:50px;">Candidates</h1>

    @if (RealCandidatesInfo != null)
    {
            <!--Div in the center of the page-->
            <div class="add-job-container">
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm"><i class="fa fa-search"></i></span>
                    </div>
                    <input type="text" class="form-control col-5" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Search: Name, Status, job appl...." @bind="SearchTerm">
                    <span><button class="btn btn-primary" @onclick="RealSearch">Search</button></span>
                </div>

                <div class="filterSection">

                    <select class="form-control filterEthinic" @onchange="@onValChanged">
                        <option value="0" disabled selected> Filter Race</option>
                        <option value="Black">Black</option>
                        <option value="White">White</option>
                        <option value="Indian">Indian</option>
                        <option value="Coloured">Coloured</option>
                    </select>

                    <select class="form-control filterGender" @onchange="@onValChanged">
                        <option value="0" disabled selected> Filter By Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>

                    <select class="form-control filterDisability" @onchange="@onValChanged">
                        <option value="0" disabled selected> Filter By Disability</option>
                        <option value="disabled">disabled</option>
                        <option value="abled">Not Disabled</option>
                    </select>

                </div>
                <div>
                @if (EthnicFilterApplied)
                {
                            <div class="filterpill">
                                <span>@EthnicFilter</span>
                                <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="ClearEthnic" /></span>
                            </div>
                }
                @if (GenderFilterApplied)
                {
                            <div class="filterpill">
                                <span>@GenderFilter</span>
                                <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="ClearGender" /></span>
                            </div>
                }
                @if (DisabilityFilterApplied)
                {
                            <div class="filterpill">
                                <span>@DisabilityFilter</span>
                                <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="ClearDisability" /></span>
                            </div>
                }
                </div>
                <!--Div containing the functionality-->
            <div class="inner-wrapper m-0">

                    <!--Boxes on the left/summary boxes-->
                <div class="left m-2">
                        <div class="">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Full Name</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Change status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @if (RealCandidatesInfo.Count > 0)
                                {
                                    int num = 1;
                                    @foreach (var candidate in RealCandidatesInfo)
                                    {
                                                    <tr @onclick="() => ChangeCurrent(candidate)" id=@($"{(candidate.Id)}")>
                                                        <td scope="row">@(num++)</td>
                                                        <td scope="row">@candidate.FirstName @candidate.LastName</td>
                                                        <td scope="row">CEO Interview</td>
                                                        <td scope="row" class="">
                                                            <a href="#" data-tip="edit"><i class="fa fa-edit"></i></a>
                                                        </td>
                                                    </tr>
                                    }
                                }


                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!--Box on the right/Details box + buttons-->
                <div class="right  col-6 m-2">

                        <!--Details box-->
                    <div class="profile rounded shadow-sm ">
                            <div class="container col-12">
                                <div class="row text-center">

                                    <div class="col-xl-12 col-sm-12 mb-1">
                                        <div class="py-5 px-4 select-details">
                                        @if (RealUserPersonalInfo != null)
                                        {
                                                    <img src="/img/Guy.png" alt="" width="70" class="img-fluid rounded-circle mb-3 img-thumbnail shadow-sm">
                                                    <h5 class="mb-0">@RealUserPersonalInfo.FirstName @RealUserPersonalInfo.LastName</h5>
                                                    <hr />
                                                    <span class="small text-uppercase text-muted">Gender</span>
                                                    <p>@RealUserPersonalInfo.Email</p>
                                                    <hr>
                                                    <span class="small text-uppercase text-muted">Contact Info</span>
                                                    <p><span class="small text-uppercase text-muted">Phone Number:</span> @RealUserPersonalInfo.PhoneNumber</p>
                                                    <p><span class="small text-uppercase text-muted">Address:</span> @RealUserPersonalInfo.Address</p>
                                                    <hr>
                                                    <div>
                                                        <ProgressBarComp />
                                                    </div>
                                                    <span class="small text-uppercase text-muted">More Info</span>
                                                    <p>@CurrentCandidate.ExtraInfo</p>
                                        }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    }
    else
    {
            <br /> <br /> <br />
            <h2>Loading...</h2>
    }
</div>

@code {

    private List<AppUser> RealCandidates { get; set; } = new List<AppUser>();

    private AppUser RealUser { get; set; }
    private List<PersonalInformation> RealCandidatesInfo { get; set; }
    private PersonalInformation RealUserPersonalInfo { get; set; }
    private List<WorkHistory> RealUserExperience { get; set; }
    private List<Education> RealUserEducation { get; set; }

    [Parameter]
    public string JobId { get; set; }


    #region Component LifeCycles
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        try
        {
            RealCandidates = await httpClient.GetFromJsonAsync<List<AppUser>>($"api/CandidateTest/?JobId={JobId}");
            if (RealCandidates.Count > 0)
            {
                Console.WriteLine("we made it here");
                RealCandidatesInfo = await httpClient.GetFromJsonAsync<List<PersonalInformation>>($"api/CandidateTest/candidates/?Job={JobId}");
            }
            if (RealCandidatesInfo.Count > 0)
            {
                Console.WriteLine("are we in?");
                RealUserPersonalInfo = RealCandidatesInfo[0];
                CurrentCandidate = Candidates[0];
            }
        }
        catch (Exception ex)
        {
            RealCandidates = new List<AppUser>();
        }



    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsr.InvokeVoidAsync("initialize");  //Calls the initialize function from the javascript file.
        }
        if (Candidates.Count > 0)
        {
            CurrentCandidate = Candidates[0];
        }
    }
    #endregion Component LifeCycles


    private void ChangeCurrent(PersonalInformation newcandidate)
    {
        RealUserPersonalInfo = newcandidate;
    }


    #region Searching and Filtering
    //Search query parameters
    private string SearchTerm { get; set; } = string.Empty;
    private string DisabilityFilter { get; set; } = string.Empty;
    private string EthnicFilter { get; set; } = string.Empty;
    private string GenderFilter { get; set; } = string.Empty;

    //boolean filtering checkers
    private bool EthnicFilterApplied = false;
    private bool GenderFilterApplied = false;
    private bool DisabilityFilterApplied = false;

    private List<PersonalInformation> SearchedCandidates { get; set; } = new List<PersonalInformation>();

    private void onValChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        switch (args.Value.ToString())
        {
            case "Black":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "White":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "Indian":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "Coloured":
                EthnicFilter = args.Value.ToString();
                EthnicFilterApplied = true;
                break;
            case "Male":
                GenderFilter = args.Value.ToString();
                GenderFilterApplied = true;
                break;
            case "Female":
                GenderFilter = args.Value.ToString();
                GenderFilterApplied = true;
                break;
            case "disabled":
                DisabilityFilter = args.Value.ToString();
                DisabilityFilterApplied = true;
                break;
            case "abled":
                DisabilityFilter = args.Value.ToString();
                DisabilityFilterApplied = true;
                break;
            default:
                break;
        }
        SearchEvent();
    }

    //Clear Methods
    private void ClearEthnic()
    {
        EthnicFilterApplied = false;
        EthnicFilter = string.Empty;
        SearchEvent();
    }
    private void ClearGender()
    {
        GenderFilterApplied = false;
        GenderFilter = string.Empty;
        SearchEvent();
    }
    private void ClearDisability()
    {
        DisabilityFilterApplied = false;
        DisabilityFilter = string.Empty;
        SearchEvent();
    }

    private void RealSearch()
    {

        SearchEvent();

    }

    private async Task<List<PersonalInformation>> SearchEvent()
    {


        try
        {
            RealCandidates = await httpClient.GetFromJsonAsync<List<AppUser>>($"api/CandidateTest/?JobId={int.Parse(JobId)}");
        }
        catch (Exception ex)
        {
            RealCandidates = new List<AppUser>();
        }

        if (RealCandidates.Count > 0)
        {
            SearchedCandidates = await httpClient.GetFromJsonAsync<List<PersonalInformation>>($"api/CandidateTest/candidates/?Job={JobId}&SearchQuery={SearchTerm}&ethnicityFiler={EthnicFilter}&GenderFilter={GenderFilter}&disabilityFilter={DisabilityFilter}");
        }

        if (SearchedCandidates.Count > 0)
        {
            RealUserPersonalInfo = SearchedCandidates[0];
        }
        RealCandidatesInfo = SearchedCandidates;
        InvokeAsync(StateHasChanged);
        return RealCandidatesInfo;
    }

    #endregion


    //==============================================================================================================================================================


    //TestModels
    private static List<CandidateTest> DisplayItems = Candidates;

    private CandidateTest CurrentCandidate = new CandidateTest();

    //Data
    private static List<CandidateTest> Candidates = new List<CandidateTest>
{


    new CandidateTest
    {
        Id = 1,
        Name = "Johnathan Snow",
        JobAppliedFor = "Developer",
        YearsOfExp = 2,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    },

    new CandidateTest
    {
        Id = 2,
        Name = "Edward Stark",
        JobAppliedFor = "Lawyer",
        YearsOfExp = 8,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    },

    new CandidateTest
    {
        Id = 3,
        Name = "Peter Parker",
        JobAppliedFor = "Developer",
        YearsOfExp = 1,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    },

    new CandidateTest
    {
        Id = 4,
        Name = "Bruce Banner",
        JobAppliedFor = "Cloud Engineer",
        YearsOfExp = 5,
        ExtraInfo = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure laborum nesciunt unde iusto quas rerumores quaerat eum velit totam!"

    }

    };


}
