@page "/jobpostingsexp"
@inject IJSRuntime jsr
@inject HttpClient HttpClient
@using XebecPortal.Client.JobPortalTestEnv.Jobport_3.Pages

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800&display=swap');

    * {
        font-family: 'Montserrat', sans-serif;
    }

    .wrapper-job {
        width: 100%;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: white;
    }

    .add-job-container {
        padding: 20px;
        width: 80%;
        margin: auto auto 5% auto;
        height: 90%;
        display: flex;
        align-items: center;
        flex-direction: column;
        /*box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;*/
        /* background-color: #fff;*/
        border-radius: 5px;
    }

    .inner-wrapper {
        width: 100%;
        max-height: 90%;
        margin: auto;
        display: flex;
       /* background-color: aliceblue;*/
    }

    .left {
        width: 45%;
        height: inherit;
        padding: 5px;
        overflow-x: unset;
        overflow-y: auto;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        background-color: #fff;
        border-radius: 5px;
       /* background-color: aquamarine;*/
    }

        .left::-webkit-scrollbar {
            width: 12px;
        }

        .left::-webkit-scrollbar-track {
            background-color: #EAF2F8;
        }

        .left::-webkit-scrollbar-thumb {
            background-color: #95A5A6;
            border-radius: 20px;
            border: 3px solid #EAF2F8;
        }

    .box {
        width: 90%;
        height: fit-content;
        padding: 10px;
        margin: 5px auto;
        cursor: pointer;
    }
    .box:hover{
        border-color: blue;
    }
     .box:hover ~ .box-title {
        text-decoration:underline;
    }

    .right {
        width: 55%;
        height: inherit;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
      /*  background-color: rosybrown;*/
    }

    .select-details {
        width: 90%;
        height: 85%;
        margin: auto;
        padding: 10px;
        overflow-y: auto;
    }

    .box,
    .select-details {
        border: 1px solid #95A5A6;
        border-radius: 5px;
        font-size: 13px;
        padding: 5px;
    }

    .select-details:-webkit-scrollbar {
        width: 12px;
    }

    .select-details::-webkit-scrollbar-track {
        background-color: #EAF2F8;
    }

    .select-details::-webkit-scrollbar-thumb {
        background-color: #95A5A6;
        border-radius: 20px;
        border: 3px solid #EAF2F8;
    }

    .btn-container {
        width: 90%;
        height: 10%;
        margin: auto;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }


    ul span {
        font-weight: bold;
    }

    li {
        list-style: none;
    }

    .list-group{
        padding: 5px;
    }

    .box-title {
        color: #4697e1;
    }
    .box-description {
        color: #808080;
    }

    .select-details p span {
        font-weight: bold;
    }
</style>


<!--Entire page as a flexbox-->
<div class="wrapper-job">

    <!--Heading-->
    <h1 class="mt-5" style="margin-bottom: -5px;">Job Postings</h1>

    @if (DisplayJobs != null)
    {
    <!--Div in the center of the page-->
    <div class="add-job-container">

        <!--Search bar-->
        @*<input type="text" class="form-control w-75 mt-2 mb-3" placeholder="search" @bind-value="searchTerm">*@
        <div class="input-group input-group-sm mb-3 justify-content-center">
            <div class="input-group-prepend">
                <span class="input-group-text" id="inputGroup-sizing-sm"><i class="fa fa-search"></i></span>
            </div>
            <input type="text" class="form-control col-12" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Search: Title, Location, Decription, Loca..." @onchange="@(e => onChange(e))" @bind="Filter"
                   @bind:event="oninput">
        </div>
        @if (JobTypes != null)
        {
            <select class="form-control" @bind="@JobTypes">

                <option value=""></option>
                @foreach (var country in JobTypes)
                {
                    <option value="@country.Id"> @country.Type </option>
                }
                
            </select>
         }
        

        <!--Div containing the functionality-->
        <div class="inner-wrapper">

            <!--Boxes on the left/summary boxes-->
            <div class="left">

                @if (DisplayJobs != null && DisplayJobs.Count > 0)
                {
                    @foreach (var job in DisplayJobs)
                    {
                        if (!IsVisible(job))
                            continue;
                        <div class="box">
                            <ul class="list-group" @onclick="() => ViewJob(job)">

                                @*
                                <li class=" col-12 d-flex justify-content-between">
                                    <span class=""><i class="fa fa-briefcase" aria-hidden="true" style="font-size:25px;color:cadetblue;"></i> </span>

                                    <span class="">
                                        <i class="fa fa-pencil" aria-hidden="true" style="font-size:25px;color:mediumpurple" onclick="document.getElementById('id01').style.display='block'"></i>
                                    </span>
                                </li>*@

                                <h5 class="box-title">@job.Title </h5>
                                <p><i class="fas fa-map-marker-alt"></i> &nbsp; @job.Location</p>
                                <p><span> @job.Compensation</span></p>
                                @if (job.Description.Length > 200)
                                {
                                    string shortented = job.Description.Substring(0, 200) + "...";
                                    <p class="box-description"> @shortented </p>
                                }
                                else
                                {
                                    <p class="box-description"> @job.Description </p>
                                }
                            </ul>
                        </div>

                    }
                }



            </div>

            <!--Box on the right/Details box + buttons-->
            <div class="right">
                <!--Details box-->
                <div class="select-details">


                    @if (CurrentJob2 != null)
                    {
                        <h2>@CurrentJob2.Title</h2>
                        <p><i class="fas fa-map-marker-alt"></i> &nbsp; @CurrentJob2.Location</p>
                        <p><span>Compensation: </span>@CurrentJob2.Compensation</p> <hr />
                        <p>@CurrentJob2.Description</p>
                    }


                </div>
                <!--Search + post job buttons-->
                <div class="btn-container">
                    <!--button class="btn btn-outline-info btn-sm mr-1" onclick="">Search</button>* -->
                    <a href="/addjobpost" class="btn btn-outline-success btn-sm ml-1">Post Job</a>
                </div>
            </div>

        </div>

    </div>
    }
    else
    {
        <br/> <br /> <br />
        <h2>Loading...</h2>
    }
</div>




@*<div id="id01" class="w3-modal">
    <div class="w3-modal-content">

        <header class="w3-container" style="background-color: #d8e2dc;">
            <span onclick="document.getElementById('id01').style.display='none'"
                  class="w3-button w3-display-topright">&times;</span>
            <h2>Edit Job</h2>
        </header>

        <div class="w3-container">
            <form>
                <div class="form-group">
                    <label for="job-title">Job Title</label>
                    <input type="text" class="form-control" id="job-title" placeholder="@EditJob.Title" @bind-value="EditJob.Title">
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </form>
        </div>

        <footer class="w3-container" style=" background-color: #d8e2dc;">
            <p class="badge">Click Save to Save and x to dismiss</p>
        </footer>

    </div>
</div>*@
@code
    {

    //Initialising
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DisplayJobs = await HttpClient.GetFromJsonAsync<List<Job>>("api/job");
        JobTypes = await HttpClient.GetFromJsonAsync<List<JobType>>("api/jobtype");
        if (DisplayJobs != null)
        {
            CurrentJob2 = DisplayJobs[0];
        }
    }

    /*New Word */
    public string Filter { get; set; }



    public List<Job> DisplayJobs { get; set; }
    public Job CurrentJob2 { get; set; } = new Job();
    public List<JobType> JobTypes { get; set; }


    private void ViewJob(Job JobToView)
    {
        CurrentJob2 = JobToView;
    }




    private bool isFound = false;

    public string SearchTerm { get; set; } = String.Empty;


    public bool IsVisible(Job forecast)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (forecast.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (forecast.Location.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        SearchTerm = (string)args.Value;
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {

        }
    }

    /* Search Function
    private static void Search()
    {
        SearchResults = Jobs.FindAll(q => q.Title.ToLower().Equals(searchTerm.ToLower()));

        //this is for when the search bar is empty
@* if(SearchResults == null || SearchResults.Count <= 0)
SearchResults = Jobs; *@

}*/


    bool IsClicked = false;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsr.InvokeVoidAsync("initialize"); //Calls the initialize function from the javascript file.
        }
        if (DisplayJobs != null)
        {
            CurrentJob2 = DisplayJobs[0];
        }
    }

    public Job EditJob { get; set; } = new Job();

    // Search variable
    string searchTerm = string.Empty;




    //public void NewSearch()
    //{

    //    string lookingFor = SearchTerm.ToLower();
    //    List<Job> TempJObs = Jobs.FindAll(q => (q.Title.ToLower().Contains(lookingFor) || q.Location.ToLower().Contains(lookingFor)));

    //    if (TempJObs.Count < 1)
    //    {
    //        //Look under Discription
    //        TempJObs = Jobs.FindAll(q => q.Description.ToLower().Contains(lookingFor) || q.Compensation.ToString().ToLower().Contains(lookingFor));
    //    }

    //    //if found
    //    if (TempJObs.Count > 0)
    //    {
    //        DisplayJobs = TempJObs;
    //    }
    //    else
    //    {
    //        //Display alert item no found
    //        //Todo
    //    }

    //}



    //private int ReturnedJobId = 0;

    //private Job CurrentJob = null;

    ////Method for when a summary box is clicked. Uses the JobPostingTest.js in the js folder inside the wwwroot.
    //private async Task On()
    //{
    //    IsClicked = true;
    //    ReturnedJobId = Int32.Parse(await jsr.InvokeAsync<string>("show")); //Calls the show function from the javascript file.

    //    CurrentJob = SearchResults.FirstOrDefault(q => q.Id == ReturnedJobId);

    //}
}
