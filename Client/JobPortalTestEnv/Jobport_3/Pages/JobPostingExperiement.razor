@page "/jobpostingsexp"
@layout JobPortalLayout
@inject IJSRuntime jsr
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject State State


<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800&display=swap');

    * {
        font-family: 'Montserrat', sans-serif;
    }

    .wrapper-job {
        height: 90%;
        width: 90%;
        margin: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: #6c85a3;
        margin: auto;
        overflow-y: auto;
    }

    .header {
        height: 15%;
        width: 100%;
        padding: 1.2rem 0 0 0;
        background-color: #b4c0d0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        .header h5 {
            font-weight: bold;
        }

    .searchbar {
        width: 92%;
        display: flex;
        flex-direction: row;
        padding: 4px 6px;
        /* background-color:aqua;*/
    }

    .btn {
        background-color: #6c85a3;
        color: #fff;
    }

    /*=======================filter section ================================*/
    .filterSection {
        width: 50%;
        display: flex;
        flex-direction: row;
        justify-content: center;
    }

    .filterjob {
        width: 150px;
        margin-right: 20px;
        background-color: #fff;
    }

    .filterpill {
        background-color: #ddd;
        border: none;
        color: black;
        padding: 4px 6px;
        text-align: center;
        text-decoration: none;
        border-radius: 12px;
    }

    .filterClose {
        cursor: pointer;
        border-radius: 11px;
        height: 50%;
    }

        .filterClose:hover {
            background-color: #C4C4C4;
        }


    /*=======================main container ================================*/
    .add-job-container {
        padding: 20px;
        width: 100%;
        height: 85%;
        display: flex;
        align-items: center;
        flex-direction: column;
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
    }

    .inner-wrapper {
        width: 95%;
        max-height: 95%;
        margin: auto;
        display: flex;
        /* background-color: aliceblue;*/
    }


    /*=======================left side container ================================*/
    .left {
        width: 40%;
        height: inherit;
        padding: 5px;
        /*overflow-x: unset;
        overflow-y: auto;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;*/
        border-radius: 5px;
        /*background-color: #fff;*/
    }

        .left::-webkit-scrollbar {
            width: 12px;
        }

        .left::-webkit-scrollbar-track {
            background-color: #6c85a3;
        }

        .left::-webkit-scrollbar-thumb {
            background-color: #95A5A6;
            border-radius: 20px;
            border: 3px solid #EAF2F8;
        }

    .box {
        width: 99%;
        height: fit-content;
        padding: 10px;
        margin: 0px auto;
        margin-bottom: 15px;
        cursor: pointer;
    }

        .box:hover {
            border-color: blue;
        }

            .box:hover ~ .box-title {
                text-decoration: underline;
            }

    /*=======================right side container ================================*/

    .right {
        width: 60%;
        height: inherit;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        /*background-color: rosybrown;*/
    }

    .rightbox {
        width: 97%;
        height: 85%;
        margin: auto;
        /*background-color: aqua;
        overflow-y: scroll;*/
    }

    .select-details {
        width: 50%;
        height: 100%, fit-content;
        max-height: 350px;
        margin: auto;
        padding: 10px;
        background-color: #fff;
        border-radius: 5px;
        /*hiding the scrollbar*/
        overflow-y: auto;
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE 10+ */
    }

        .select-details::-webkit-scrollbar {
            width: 0px;
        }

    .box,
    .select-details {
        border: 1px solid #95A5A6;
        border-radius: 5px;
        font-size: 13px;
        padding: 5px;
        background-color: #fff;
    }

    .rightbox::-webkit-scrollbar {
        width: 12px;
    }

    .rightbox::-webkit-scrollbar-track {
        background-color: #6c85a3;
        border: none;
    }

    .rightbox::-webkit-scrollbar-thumb {
        background-color: #95A5A6;
        border-radius: 20px;
        border: 3px solid #EAF2F8;
    }

    .btn-container {
        width: 90%;
        height: 10%;
        margin: auto;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }


    ul span {
        font-weight: bold;
    }

    li {
        list-style: none;
    }

    .list-group {
        padding: 5px;
    }

    .box-title {
        color: #6c85a3;
    }

    .box-description {
        color: #808080;
    }

    .select-details p span {
        font-weight: bold;
    }


    /*edit/delete styles*/
    .primary-container{
        width: 100%;
        display: flex;
        justify-content: space-between;
    }

    .btn-remove, .btn-edit{
        outline: none;
        border: none;
        transition: 0.3s;
    }

    .btn-remove{
        background-color: #ff4045;
    }

    .btn-remove:hover, .btn-edit:hover{
        background-color: #cf2ec4;
    }

    .btn-edit{
        background-color: #698ad6;
    }

/*loading test*/
.spinner {
    border: 16px solid silver;
    border-top: 16px solid #337AB7;
    border-radius: 50%;
    width: 80px;
    height: 80px;
    animation: spin 700ms linear infinite;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    position: absolute;
    z-index: 20;
}

@@keyframes spin {
    0% {
        transform: rotate(0deg)
    }

    100% {
        transform: rotate(360deg)
    }
}
</style>


@if(loadSpinner)
{
    <div class="spinner"></div>
}

@if(IsModalOpened)
{
    <EditJobModal ToggleModal="ToggleModal"></EditJobModal>
}

@if(State.UserEmail != null){

<!--Entire page as a flexbox-->
<div class="wrapper-job">

    <!--Heading-->
    <div class="header">
        @* <h4>Job Postings</h4> *@

        @if (LstJobs != null)
        {
            <!--Search bar-->
            @*<input type="text" class="form-control w-75 mt-2 mb-3" placeholder="search" @bind-value="searchTerm" />*@
            <div class="searchbar">
                <div class="searchTitle d-flex justify-content-center" style="padding-bottom: 10px; padding-left: 15px;">
                    <span><input type="text" class="form-control col-12" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Job Title/Compensation" @bind="SearchTerm"></span>
                </div>
                <div class="searchLocation" style="padding-bottom: 10px; padding-left: 15px;">
                    <span><input type="text" class="form-control col-12" aria-label="Small" aria-describedby="inputGroup-sizing-sm" placeholder="Location" @bind="SearchLocation"></span>
                </div>
                <div style="padding-bottom: 25px; padding-left: 15px;">
                    <span><button class="btn searchButton" @onclick="RealSearch">Search</button></span>
                </div>

                <div class="filterSection">
                    @if (JobTypes != null)
                    {

                        <select class="form-control filterjob" @onchange="@onValChanged">
                            <option value="" disabled selected> Job Type</option>
                            @foreach (var jobType in JobTypes)
                            {
                                <option value="@jobType.Type"> @jobType.Type </option>
                            }

                        </select>
                    }
                    <div>
                        @if (jobFilterApplied)
                        {
                            <div class="filterpill">
                                <span>@JobFilter</span>
                                <span><img src="Icon_close.png" alt="close" class="filterClose" @onclick="Clear" /></span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>


    @if (LstJobs != null)
    {

        <!--Div in the center of the page-->
        <div class="add-job-container">

            @if (LstJobs.Count > 0)
            {

                <!--Div containing the functionality-->
                <div class="inner-wrapper">

                    <!--Boxes on the left/summary boxes-->
                    <div class="left">

                        @if (LstJobs != null && LstJobs.Count > 0)
                        {
                            <p><strong>Total jobs available: @LstJobs.Count</strong></p>
                            @foreach (var job in LstJobs)
                            {
                                <div class="box">
                                    <ul class="list-group" @onclick="() => ViewJob(job)">

                                        <h5 class="box-title">@job.Title </h5>
                                        <p><i class="fas fa-map-marker-alt"></i> &nbsp; @job.Location</p>
                                        
                                        @if (job.Description.Length > 200)
                                        {
                                            string shortented = job.Description.Substring(0, 200) + "...";
                                            <p class="box-description"> @shortented </p>
                                        }
                                        else
                                        {
                                            <p class="box-description"> @job.Description </p>
                                        }
                                    </ul>
                                </div>
                            }
                        }
                        else
                        {
                            <p> No Jobs found</p>
                        }



                    </div>

                    <!--Box on the right/Details box + buttons-->
                    <div class="right">

                        @if (CurrentJob2 != null && LstJobs.Count > 0)
                        {
                            <div class="rightbox">
                                <!--Details box-->
                                <div class="select-details position-fixed" style="padding: 10px;">
                                    
                                    <div class="primary-container">
                                    
                                        <h2>@CurrentJob2.Title</h2> 
                                        <div class="inner-btn-container">
                                            <button class="btn btn-danger btn-sm btn-remove" @onclick="() => RemoveJob(CurrentJob2)">Remove</button>
                                            <button class="btn btn-primary btn-sm btn-edit" @onclick="() => ToggleModal(CurrentJob2)">Edit</button>                                   
                                        </div>


                                    </div>

                                    <p><i class="fas fa-map-marker-alt"></i> &nbsp; @CurrentJob2.Location</p>
                                    
                                    <button class="btn" @onclick="() => ViewCandidates(CurrentJob2)">View Candidates</button>
                                    <hr />
                                    <div style="height: 270px; overflow-y:auto">
                                        <p>@CurrentJob2.Description</p>
                                    </div>
                                </div>
                            </div>
                        }
                        <!--Search + post job buttons-->
                        <div class="btn-container">
                            <!--button class="btn btn-outline-info btn-sm mr-1" onclick="">Search</button>* -->
                            <a href="/addposts2" > <i class="fa fa-plus-circle fa-3x position-fixed" style="color:white" aria-hidden="true"></i></a>
                        </div>
                    </div>

                </div>
            }
            else
            {
                <br /> <br /> <br />
                <h4 style="color:#fff">Could not retrive the records you are looking for</h4>
            }

        </div>

    }
    else
    {
        <div class="spinner"></div>
    }
</div>
}
else
{
    <UnauthorizedComponent/>
}
@code{

    bool loadSpinner = false;
    bool IsModalOpened = false;


      protected override async Task OnInitializedAsync()
      {
            await base.OnInitializedAsync();
            var userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
            if (!string.IsNullOrWhiteSpace(userdata))
            {
                string[] userdetails = userdata.Split(';');
                State.UserEmail = userdetails[0];
                State.Role = userdetails[1].ToLower();
                State.Id = Int32.Parse(userdetails[3]);        

            }

            try
            {
                LstJobs = await HttpClient.GetFromJsonAsync<List<Job>>("api/job");
                JobTypes = await HttpClient.GetFromJsonAsync<List<JobType>>("api/jobtype");

                  if (LstJobs != null)
                  {
                        CurrentJob2 = LstJobs[0];
                  }

            }
            catch (Exception ex)
            {
                LstJobs = new List<Job>();
                JobTypes = new List<JobType>();
            }

          
        }


    private async Task ToggleModal(Job Job)
    {
        loadSpinner = true;
        State.JobPostEditId = Job.Id;
        IsModalOpened = !IsModalOpened; 
        LstJobs = await HttpClient.GetFromJsonAsync<List<Job>>("api/job");
        ViewJob(LstJobs[0]);
        loadSpinner = false;      
    }

     private async Task RemoveJob(Job Job)
    {   
        loadSpinner = true;
        await HttpClient.DeleteAsync($"api/job/{Job.Id}");        
        LstJobs = await HttpClient.GetFromJsonAsync<List<Job>>("api/job");
        ViewJob(LstJobs[0]);        
        loadSpinner = false;      
    }

}